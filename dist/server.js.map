{"version":3,"sources":["../server.js"],"names":["console","log","app","use","logger","restrictAccess","admin","listen","req","res","next","method","url","test","setHeader","end","setup","options"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AALAA,QAAQC,GAAR,CAAY,EAAZ;;;AAOA;AACA;;AAEA;;AAEA,IAAMC,MAAI,wBAAV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAA,IAAIC,GAAJ,CAAQC,MAAR;AACA;AACA;AACAF,IAAIC,GAAJ,CAAQ,QAAR,EAAiBE,cAAjB,EACIF,GADJ,CACQ,QADR,EACiBG,KADjB;;AAGAJ,IAAIK,MAAJ,CAAW,MAAX,EAAkB,YAAU;AACxBP,YAAQC,GAAR,CAAY,+BAAZ;AACH,CAFD;;AAIA;AACA,SAASG,MAAT,CAAgBI,GAAhB,EAAoBC,GAApB,EAAwBC,IAAxB,EAA6B;AACzBV,YAAQC,GAAR,CAAY,OAAZ,EAAoBO,IAAIG,MAAxB,EAA+BH,IAAII,GAAnC;AACAF;AACH;AACD,SAASG,IAAT,CAAcL,GAAd,EAAkBC,GAAlB,EAAsBC,IAAtB,EAA2B;AACvBD,QAAIK,SAAJ,CAAc,cAAd,EAA6B,YAA7B;AACAL,QAAIM,GAAJ,CAAQ,aAAR;AACH;;AAED;AACA,SAASV,cAAT,CAAwBG,GAAxB,EAA4BC,GAA5B,EAAgCC,IAAhC,EAAqC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAD,QAAIK,SAAJ,CAAc,6BAAd,EAA6C,GAA7C,EAViC,CAUmB;AACpD;AACAL,QAAIK,SAAJ,CAAc,cAAd,EAA6B,yBAA7B;AACAJ;AACA;AACA;AACA;AACA;AAEH;AACD,SAASJ,KAAT,CAAeE,GAAf,EAAmBC,GAAnB,EAAuBC,IAAvB,EAA4B;AACxB,YAAOF,IAAII,GAAX;AACI,aAAK,QAAL;AACAC,iBAAKL,GAAL,EAASC,GAAT,EAAaC,IAAb;AACA;AACA,aAAK,GAAL;AACA;AACAD,gBAAIM,GAAJ,CAAQ,YAAR;AANJ;AAQH;;AAED;AACA,SAASC,KAAT,CAAeC,OAAf,EAAuB;AACnB;;AAEA;AACA,WAAO,UAAST,GAAT,EAAaC,GAAb,EAAiBC,IAAjB,EAAsB;AACzB;AACH,KAFD;AAGH","file":"server.js","sourcesContent":["'use strict'\r\nconsole.log(12)\r\nimport http from 'http';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport mime from 'mime';\r\nimport connect from 'connect';\r\n\r\n// 业务逻辑\r\n// import admin from './src/admin/index'\r\n\r\n//connect中间件组件是一个函数，他拦截HTTP服务器提供得请求和相应对象，执行逻辑然后或者结束响应，或者把它传递给下一个中间件组件。Connect用分排期把中间件'连接'在一起\r\n\r\nconst app=connect();\r\n// app.all('*', function(req, res, next) {\r\n//     res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n//     res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\r\n//     res.header(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\");\r\n//     res.header(\"X-Powered-By\", ' 3.2.1');\r\n//     res.header(\"Content-Type\", \"application/json;charset=utf-8\");\r\n//     next();\r\n// });\r\n\r\n\r\napp.use(logger);\r\n// app.use('/',restrict);\r\n// 服务器挂载\r\napp.use('/admin',restrictAccess) \r\n   .use('/admin',admin);\r\n\r\napp.listen('3006',function(){\r\n    console.log('server listening on port 3006')\r\n})\r\n\r\n// logger中间件--记录请求日志\r\nfunction logger(req,res,next){\r\n    console.log('%s %s',req.method,req.url);\r\n    next();\r\n}\r\nfunction test(req,res,next){\r\n    res.setHeader('Content-Type','text/plain');\r\n    res.end('hello world');\r\n}\r\n\r\n// 登录认证中间件  确保访问页面得是有效用户\r\nfunction restrictAccess(req,res,next){\r\n    // var authorization=req.headers.authorization;\r\n    // if(!authorization)return next(new Error('Unauthorized'));\r\n\r\n    // var parts=authorization.split('');\r\n    // var scheme=parts[0];\r\n    // var auth=new Buffer(parts[1],'base64').toString().split(':');\r\n    // var user=auth[0];\r\n    // var pass=auth[1];  \r\n    \r\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");  // 允许跨域\r\n    //告诉浏览器编码方式  \r\n    res.setHeader(\"Content-Type\",\"text/html;charset=UTF-8\" ); \r\n    next();\r\n    // authenticateWithDataBase(user,pass,function(err){\r\n    //      if(err) return next(err);\r\n    //      next();\r\n    //  });\r\n\r\n}\r\nfunction admin(req,res,next){\r\n    switch(req.url){\r\n        case '/login':\r\n        test(req,res,next);\r\n        break;\r\n        case '/':\r\n        default:\r\n        res.end('try /login');\r\n    }\r\n}\r\n\r\n// 创建可配置得中间件\r\nfunction setup(options){\r\n    // 这是逻辑\r\n\r\n    // 此闭包做中间件得初始化\r\n    return function(req,res,next){\r\n        // 中间逻辑\r\n    }\r\n}"]}