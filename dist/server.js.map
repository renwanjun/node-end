{"version":3,"sources":["../src/server.js"],"names":["app","use","restrictAccess","admin","main","listen","console","log","req","res","next","setHeader","routes","GET","end","id"],"mappings":"AAAA;;AAEA,4B;AACA,wB;AACA,4B;AACA,4B;AACA,kC;;;AAGA,kC;AACA,gC;;AAEA;AAJA;;AAOA,IAAMA,MAAI,wBAAV;AACA;;;;;;;;;AASA;AACAA,IAAIC,GAAJ,CAAQ,sBAAO,cAAP,CAAR;AACA;AACA;AACAD,IAAIC,GAAJ,CAAQ,QAAR,EAAiBC,cAAjB;AACID,GADJ,CACQ,QADR,EACiBE,gBAAMC,IADvB;;AAGA;AACAJ,IAAIK,MAAJ,CAAW,MAAX,EAAkB,YAAU;AACxBC,YAAQC,GAAR,CAAY,+BAAZ;AACH,CAFD;;;;AAMA;AACA,SAASL,cAAT,CAAwBM,GAAxB,EAA4BC,GAA5B,EAAgCC,IAAhC,EAAqC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAD,QAAIE,SAAJ,CAAc,8BAAd,EAA8C,GAA9C,EAViC,CAUoB;AACrD;AACAF,QAAIE,SAAJ,CAAc,cAAd,EAA6B,yBAA7B;AACAD;AACA;AACA;AACA;AACA;;AAEH;;AAED,IAAME,SAAO;AACTC,SAAI;AACA,kBAAS,eAASL,GAAT,EAAaC,GAAb,EAAiB;AACtBH,oBAAQC,GAAR,CAAY,IAAZ;AACAE,gBAAIK,GAAJ,CAAQ,WAAR;AACH,SAJD;AAKA,qBAAY,gBAASN,GAAT,EAAaC,GAAb,EAAiBM,EAAjB,EAAoB;;AAE/B,SAPD,EADK,EAAb","file":"server.js","sourcesContent":["'use strict'\n\nimport http from 'http';\nimport fs from 'fs';\nimport path from 'path';\nimport mime from 'mime';\nimport connect from 'connect';\n\n// 业务逻辑\nimport logger from './logger'\nimport admin from './admin'\n\n//connect中间件组件是一个函数，他拦截HTTP服务器提供得请求和相应对象，执行逻辑然后或者结束响应，或者把它传递给下一个中间件组件。Connect用分排期把中间件'连接'在一起\n\n\nconst app=connect();\n/* app.all('*', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    res.header(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\");\n    res.header(\"X-Powered-By\", ' 3.2.1');\n    res.header(\"Content-Type\", \"application/json;charset=utf-8\");\n    next();\n}); */\n\n// 日志中间件\napp.use(logger(':method :url'));\n// app.use('/',restrict);\n// admin 服务器挂载\napp.use('/admin',restrictAccess) \n   .use('/admin',admin.main);\n\n// 服务器启动\napp.listen('3006',function(){\n    console.log('server listening on port 3006')\n})\n\n\n\n// 登录认证中间件  确保访问页面得是有效用户\nfunction restrictAccess(req,res,next){\n    // var authorization=req.headers.authorization;\n    // if(!authorization)return next(new Error('Unauthorized'));\n\n    // var parts=authorization.split('');\n    // var scheme=parts[0];\n    // var auth=new Buffer(parts[1],'base64').toString().split(':');\n    // var user=auth[0];\n    // var pass=auth[1];  \n    \n    res.setHeader(\"Access-Control-Allow-Origins\", \"*\");  // 允许跨域\n    //告诉浏览器编码方式  \n    res.setHeader(\"Content-Type\",\"text/html;charset=UTF-8\" ); \n    next();\n    // authenticateWithDataBase(user,pass,function(err){\n    //      if(err) return next(err);\n    //      next();\n    //  });\n\n}\n\nconst routes={\n    GET:{\n        '/users':function(req,res){\n            console.log('ss')\n            res.end('tobi,loki')\n        },\n        '/user/:id':function(req,res,id){\n\n        }\n    }\n}"]}